var op = {};

var input = {
  "a": {
    "x": 1,
    "y": 2,
    "j": [0,3,4],
    "z": {
      "j": [
        1,
        3
      ],
      "k": "123",
      "l": null
    }
  },
  j : []
}

function flatten(target, opts) {
  opts = opts || {}

  var delimiter = opts.delimiter || '.'
  var maxDepth = opts.maxDepth
  var output = {}

  function step(object, prev, currentDepth) {
    currentDepth = currentDepth || 1
    Object.keys(object).forEach(function(key) {
      var value = object[key]
      var isarray = opts.safe && Array.isArray(value)
      var type = Object.prototype.toString.call(value)
        //var isbuffer = isBuffer(value)
      var isobject = (
        type === '[object Object]' ||
        type === '[object Array]'
      )

      // var newKey = prev ? prev + delimiter + key : key
      var newKey = key

      if (!isarray && isobject && Object.keys(value).length &&
        (!opts.maxDepth || currentDepth < maxDepth)) {
        return step(value, newKey, currentDepth + 1)
      }

      if (output[newKey]) {
        var prevVal = output[newKey];
        if (Array.isArray(prevVal) && Array.isArray(value)) {
          output[newKey] = prevVal.concat(value)
        } else if (!Array.isArray(prevVal) && Array.isArray(value)) {
          output[newKey] = value
          output[newKey].push(prevVal)
        } else if (Array.isArray(prevVal) && !Array.isArray(value)) {
          output[newKey] = prevVal
          output[newKey].push(value)
        } else {
          output[newKey] = [prevVal]
          output[newKey].push(value)
        }
      } else {
        output[newKey] = value
      }
    })
  }

  step(target)

  return output
}



console.log(flatten(input, {
  safe: true
}))
